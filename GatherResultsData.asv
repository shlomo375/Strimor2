clear
SoftwareLocation = pwd;
AddDirToPath;
Folder = fullfile("AllTreeResulte");
fprintf("ds")
ds = fileDatastore(Folder,"IncludeSubfolders",false,"ReadFcn",@load,'UniformRead',true);
% 
% 

fprintf("readall");
data = readall(ds,"UseParallel", true);%,"UseParallel", true
Data = struct2table(data);
% save("AllDataRAW.mat","Data");
% load("AllDataRAW.mat","Data");
deleteRow = [0,0];
deleteTree = [0,0];
TreeLoc = [];
for ii =1:size(Data,1)
    if ~mod(ii,100)
        ii
    end
    TreeLoc = [TreeLoc;double(string(extractBetween(Data.ResultFileName{ii},"tree_",".mat"))),double(string(extractBetween(Data.ResultFileName{ii},"Results-","N-")))];
    if abs(Data.PathLength{ii})==-1
        
        deleteTree = [deleteTree; double(string(extractBetween(Data.ResultFileName{ii},"tree_",".mat"))),double(string(extractBetween(Data.ResultFileName{ii},"Results-","N-")))];
    else
        if double(string(extractBetween(Data.ResultFileName{ii},"tree_",".mat")))>200
            deleteTree = [deleteTree; double(string(extractBetween(Data.ResultFileName{ii},"tree_",".mat"))),double(string(extractBetween(Data.ResultFileName{ii},"Results-","N-")))];
        else
            if isempty(Data.PathLength(ii))
                deleteTree = [deleteTree; double(string(extractBetween(Data.ResultFileName{ii},"tree_",".mat"))),double(string(extractBetween(Data.ResultFileName{ii},"Results-","N-")))];
            end
        end
    
    end
end
deleteRow = ismember(TreeLoc,deleteTree,'rows');
Data(deleteRow,:)=[];

fprintf("save");
    
Data = [Data,table(string(extractBetween(Data.ResultFileName,"Results-","-tree","Boundaries","exclusive")),'variableNames',"TreeName"),...
    table(double(string(extractBetween(Data.ResultFileName,"Results-","N-","Boundaries","exclusive"))),'VariableNames',"N"),...
    table(string(extractBetween(Data.ResultFileName,"N-","-tree","Boundaries","exclusive")),'variableNames',"TreeType")];

% % Data = [Data, table(Data.TreeType,'VariableNames',"type")];


save("AllData.mat","Data");
% load("AllData.mat","Data");

Names = unique(Data.TreeName);
VariableType = {'double','double','double','string','double'};
MeanData = table('Size',[numel(Names), 5],'VariableType',VariableType,'VariableNames',["NumberOfCOnfig","PathLength","N","name","NamberOfTrees"])
stdData = MeanData;
for ii = 1:numel(Names)
    NameLoc=matches(Data.TreeName,Names(ii)) & double(extractBetween(Data.ResultFileName,"tree_",".mat"))<=60;
    MeanData(ii,:) = table(mean(Data{NameLoc,"NumberOfCOnfig"}),...
                              mean(cell2mat(Data{NameLoc,"PathLength"})),...
                              double(string(extractBefore(Names(ii),"N"))),...
                              string(extractAfter(Names(ii),"N-")),...
                              size(Data{NameLoc,"NumberOfCOnfig"},1),'RowNames',Names(ii));
    stdData(ii,:) = table(std(Data{NameLoc,"NumberOfCOnfig"}),...
                              std( cell2mat(Data{NameLoc,"PathLength"})),...
                              double(string(extractBefore(Names(ii),"N"))),...
                              string(extractAfter(Names(ii),"N-")),...
                              size(Data{NameLoc,"NumberOfCOnfig"},1),'RowNames',Names(ii));


end

save("MeanStd.mat","MeanData","stdData")

%     ResultPloter(MeanData, "PathLength",unique(MeanData.name))

% ResultPloter(MeanData, "NumberOfCOnfig",MeanData.name)
% ResultPloter(MeanData, "NumberOfCOnfig",["TwoTree","C2T_m1","C2T_m3","C2T_m7","C2T_m15"])
% ResultPloter(MeanData, "PathLength",["TwoTree","C2T_m1","C2T_m3","C2T_m7","C2T_m15"])

% figure('Name','Mean')
% ResultPloter(MeanData, "PathLength",["uniform_1","uniform_3","normal_1"])
% % figure('Name','std')
% % ResultPloter(stdData, "PathLength",["uniform_1","uniform_3","normal_1"])
% figure('Name','Mean')
% ResultPloter(MeanData, "NumberOfCOnfig",["uniform_1","uniform_3","normal_1"])
% % figure('Name','std')
% % ResultPloter(stdData, "NumberOfCOnfig",["uniform_1","uniform_3","normal_1"])
% 
% figure('Name','Mean')
% ResultPloter(MeanData, "PathLength",["uniform_3","uniform_IM3Axis__3","uniform_IM3AxisZone__3"])
% % figure('Name','std')
% % ResultPloter(stdData, "PathLength",["uniform_1","uniform_3","normal_1"])

% figure('Name','Mean')
ResultPloter(MeanData,stdData, "NumberOfCOnfig",["uniform_3","uniform_IM3AxisZoneInf__3"])

% figure('Name','Mean')
ResultPloter(MeanData,stdData, "PathLength",["uniform_3","uniform_IM3AxisZoneInf__3"])
% figure('Name','std')
% ResultPloter(stdData, "PathLength",["uniform_1","uniform_3","normal_1"])

% figure('Name','Mean')
% ResultPloter(MeanData, "NumberOfCOnfig",["uniform_3","uniform_IM1Axis__3","uniform_IM2Axis__3","uniform_IM3Axis__3"])
% % figure('Name','std')
% % ResultPloter(stdData, "NumberOfCOnfig",["uniform_1","uniform_3","normal_1"])
% 
% figure('Name','Mean')
% ResultPloter(MeanData, "PathLength",["uniform_IM1Axis__3","uniform_IM2Axis__3","uniform_IM3Axis__3"])
% % figure('Name','std')
% % ResultPloter(stdData, "PathLength",["uniform_1","uniform_3","normal_1"])
% 
% figure('Name','Mean')
% ResultPloter(MeanData, "NumberOfCOnfig",["uniform_IM1Axis__3","uniform_IM2Axis__3","uniform_IM3Axis__3"])
% % figure('Name','std')
% % ResultPloter(stdData, "NumberOfCOnfig",["uniform_1","uniform_3","normal_1"])
% 
% % figure('Name','Mean')
% % ResultPloter(MeanData, "PathLength",["TwoTree","uniform_1"])
% % % figure('Name','std')
% % % ResultPloter(stdData, "PathLength",["TwoTree","OneTree"])
% % 
% figure('Name','Mean')
% ResultPloter(MeanData, "NumberOfCOnfig",["TwoTree","uniform_1"])
% % figure('Name','std')
% % ResultPloter(stdData, "NumberOfCOnfig",["TwoTree","OneTree"])
% 
% figure('Name','Mean')
% ResultPloter(MeanData, "PathLength",["OneTree","TwoTree","OneTree_IM3Axis"])
% % figure('Name','std')
% % ResultPloter(stdData, "PathLength",["TwoTree","OneTree"])
% 
% figure('Name','Mean')
% ResultPloter(MeanData, "NumberOfCOnfig",["OneTree","TwoTree","OneTree_IM3Axis"])
